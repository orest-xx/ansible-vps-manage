---
- name: Setup fake disk and install Rivalz Node
  hosts: gaia_nodes
  become: true
  vars:
    # Replace this with the actual EVM address or take from the inventory
    evm_address: "{{ hostvars[inventory_hostname].evm_address }}"  # EVM address from inventory or vars

  tasks:
    # # - name: Detach loop devices
    # #   command: losetup -d {{ item }}
    # #   loop:
    # #     - /dev/loop0
    # #     - /dev/loop1
    # #     - /dev/loop2
    # #   ignore_errors: yes  # In case the loop device doesn't exist, ignore errors


    # # # Step 1: Create a fake disk image of 15TB size
    # # - name: Create fake disk image
    # #   command: "echo > fake_disk.img"

    # - name: Remove the existing fake disk image
    #   file:
    #     path: fake_disk.img
    #     state: absent

    # - name: Create a new fake disk image
    #   command: "dd if=/dev/zero of=fake_disk.img bs=1M count=15000"
    #   when: ansible_mounts | selectattr('mount', 'equalto', '/mnt/fake_disk') | list == []

      
    # - name: Truncate the fake disk image to 15TB
    #   command: "truncate -s 15T fake_disk.img"

    # - name: Setup loopback device for the fake disk image
    #   command: "losetup -fP fake_disk.img"
    #   register: losetup_output
    #   become: yes
    #   changed_when: false  # This doesn't change anything, it's just setting up the loop device

    # - name: Debug losetup output
    #   debug:
    #     msg: "losetup_output: {{ losetup_output.stdout }}"
    #   when: losetup_output is defined

    # - name: Verify loop devices
    #   command: "losetup -a"
    #   register: losetup_verification
    #   changed_when: false
    #   ignore_errors: true

    # - name: Debug loop devices
    #   debug:
    #     msg: "{{ losetup_verification.stdout }}"
    #   when: losetup_verification is defined    

    # - name: Format the fake disk as ext4 (only if loop0 is assigned)
    #   command: "mkfs.ext4 /dev/loop0"
    #   become: yes
    #   when: "'loop0' in losetup_output.stdout"  # Check if loop0 is in the losetup output
    #   ignore_errors: true  # Ignore errors if filesystem already exists

    # - name: Format the fake disk as ext4
    #   command: mkfs.ext4 fake_disk.img
    #   become: yes
    #   when: ansible_mounts | selectattr('mount', 'equalto', '/mnt/fake_disk') | list == []


    # - name: Ensure /mnt/fake_disk directory exists
    #   file:
    #     path: /mnt/fake_disk
    #     state: directory
    #   become: yes

    # - name: Check if the disk is already mounted
    #   command: mount | grep /mnt/fake_disk
    #   register: mount_check
    #   ignore_errors: yes

    # - name: Mount the fake disk image if not mounted
    #   command: mount -o loop fake_disk.img /mnt/fake_disk
    #   when: mount_check.rc != 0  # Only mount if the disk is not already mounted
    #   ignore_errors: yes

    # - name: Check if mount was successful
    #   debug:
    #     msg: "Mount Output: {{ mount_output.stderr }}"
    #   when: mount_output is defined and mount_output.stderr is defined

    # - name: Debug loop devices after setup
    #   debug:
    #     msg: "{{ losetup_verification.stdout }}"

    # - name: Verify the disk mount
    #   command: "df -h /mnt/fake_disk"
    #   register: disk_status
    #   changed_when: false

    # - name: Debug loop devices
    #   debug:
    #     msg: "{{ disk_status.stdout }}"     

    # # Step 4: Reset machine-id, for vps, where machine-id is often cloned
    # - name: Remove current machine-id
    #   command: "rm -f /etc/machine-id"

    # - name: Recreate system machine-id
    #   command: "systemd-machine-id-setup"
    
    # - name: Display the new machine-id
    #   command: "cat /etc/machine-id"
    #   register: machine_id
    #   changed_when: false

    # # Step 5: Update and upgrade the system
    # - name: Update package lists
    #   apt:
    #     update_cache: yes

    # - name: Upgrade all installed packages
    #   apt:
    #     update_cache: yes  # Update the package cache
    #     upgrade: yes  # Upgrade all packages
    #     force_apt_get: yes  # Force apt-get to run without prompting
    #     autoremove: yes  # Remove unnecessary packages
    #     autoclean: yes  # Clean up any temporary files
    #   become: yes

    # # Step 6: Install Node.js and Rivalz CLI
    # - name: Install Node.js
    #   shell: |
    #     curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    #     apt install -y nodejs
    #   register: nodejs_install
    #   become: yes

    # - name: Verify Node.js installation
    #   debug:
    #     msg: "{{ nodejs_install.stdout }}"
      
    # - name: Check if nodejs is installed
    #   set_fact:
    #     nodejs_installed: "{{ nodejs_install.stdout | regex_search('nodejs', ignorecase=True) is not none }}"
      
    # - name: Display nodejs installation status
    #   debug:
    #     msg: "Node.js installed: {{ nodejs_installed }}"
      
    # - name: Fail if nodejs installation failed
    #   fail:
    #     msg: "Node.js installation failed"
    #   when: nodejs_installed is not true

    # - name: Install Rivalz Node CLI globally
      # npm:
      #   name: rivalz-node-cli
      #   global: yes
      #   version: "2.6.2"

    # Step 7: Kill existing screen sessions with the same name
    - name: Kill any existing screen session named 'rivalz'
      shell: |
        screen -ls | grep "rivalz" | awk '{print $1}' | xargs -I {} screen -S {} -X quit || true
      ignore_errors: true
    
    - name: Start a new screen session 
      shell: |
        screen -dmS rivalz
      async: 0
      poll: 0

    # Step 1: Read EVM address from the .ini file
    - name: Check if evm_address is defined for the host
      fail:
        msg: "The 'evm_address' variable is not defined for this host in inventory."
      when: evm_address is not defined

    # Step 2: Capture available disks
    - name: Capture the list of available disks
      shell: "lsblk -o NAME,MOUNTPOINT | grep '/mnt/fake_disk'"
      register: available_disks
      changed_when: false

    # Step 3: Set the fake disk as the disk to select
    - name: Ensure 'loop0' is selected as the fake disk
      set_fact:
        selected_disk: "/dev/loop0 (free space: 14469 GB, mount in: /mnt/fake_disk)"

    # Debug the selected disk
    - name: Debug selected disk
      debug:
        msg: "Selected Disk: {{ selected_disk }}"

    # # Step 1: Ensure pip is installed for Python 3
    # - name: Install Python3 pip package
    #   package:
    #     name: python3-pip
    #     state: present
    #   become: yes  # Ensure we have root permissions to install system packages

    # # Step 1: Ensure pexpect is installed
    # - name: Install Python 'pexpect' library
    #   ansible.builtin.raw: |
    #     python3 -m pip install --user pexpect || sudo python3 -m pip install pexpect
    #   changed_when: false

    # Step 2: Verify pexpect installation
    - name: Verify 'pexpect' module is installed
      command: python3 -c "import pexpect"
      changed_when: false

    # # Step 4: Run Rivalz in a new screen session with EVM address and disk selection
    # - name: Start Rivalz in a screen session
    #   expect:
    #     command: "rivalz run"
    #     responses:
    #       "Enter wallet address (EVM): ": "{{ evm_address }}"
    #       "Select drive you want to use:": "{{ selected_disk }}"
    #       "Enter Disk size of /dev/loop0 (SSD) you want to use (GB, Max 14469 GB):": "{{ disk_size }}"  # Use maximum size

    #     timeout: 60
    #     # environment:
    #     #   TERM: "dumb"  # Suppress ANSI escape codes   
    #     chdir: "{{ ansible_env.HOME }}"
    #     creates: "/mnt/fake_disk/rivalz_node_initialized"  # Ensure idempotency
    #   vars:
    #     # Random disk size between 13000 and 14300 GB
    #     disk_size: "{{ 13000 + (1300 | random) }}"
    #   async: 0
    #   poll: 0
      

    - name: Run Rivalz with interactive inputs
      ansible.builtin.expect:
        # command: /bin/bash -c "export TERM=dumb && rivalz run"
        # command: /bin/bash -c "export TERM=dumb && rivalz run --no-color"
        command: /bin/bash -c "export TERM=dumb && rivalz run | sed -r 's/\x1B(\[[0-9;]*[mGKH])?//g'"

        chdir: "{{ ansible_env.HOME }}"
        responses:
          "Enter wallet address (EVM): ": "{{ evm_address }}"
          "Select drive you want to use:": "{{ selected_disk }}"
          "Enter Disk size of /dev/loop0 (SSD) you want to use (GB, Max 14469 GB):": "{{ disk_size }}"
        creates: "/mnt/fake_disk/rivalz_node_initialized"
        timeout: 300  # Increase timeout to 5 minutes or more

      register: result
      vars:
        # Random disk size between 13000 and 14300 GB
        disk_size: "{{ 13000 + (1300 | random) }}"
      environment:
        TERM: "dumb"  # This suppresses the color output


  handlers:
    - name: Reboot the system if necessary
      reboot:
        reboot_timeout: 600
